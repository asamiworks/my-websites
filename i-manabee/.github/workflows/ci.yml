name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript check
      run: npm run typecheck

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test:coverage
      env:
        NODE_ENV: test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Check for vulnerabilities
      run: npm audit --audit-level high --dry-run

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
        NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: .next/
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: .next/

    - name: Setup Firebase CLI
      uses: w9jds/setup-firebase@main
      with:
        tools: hosting
        firebase_token: ${{ secrets.FIREBASE_TOKEN }}

    - name: Deploy to Firebase Staging
      run: |
        firebase use staging --token ${{ secrets.FIREBASE_TOKEN }}
        firebase deploy --only hosting:staging --token ${{ secrets.FIREBASE_TOKEN }}

    - name: Run health check on staging
      run: |
        sleep 30
        curl -f https://staging.i-manabee.com/api/health?format=simple || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: .next/

    - name: Setup Firebase CLI
      uses: w9jds/setup-firebase@main
      with:
        tools: hosting
        firebase_token: ${{ secrets.FIREBASE_TOKEN }}

    - name: Deploy to Firebase Production
      run: |
        firebase use production --token ${{ secrets.FIREBASE_TOKEN }}
        firebase deploy --only hosting:production --token ${{ secrets.FIREBASE_TOKEN }}

    - name: Run health check on production
      run: |
        sleep 60
        curl -f https://i-manabee.com/api/health?format=simple || exit 1

    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment successful!"
        # ここでSlackやメール通知を送信

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "Production deployment failed!"
        # ここで緊急通知を送信

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://staging.i-manabee.com
          https://staging.i-manabee.com/login
          https://staging.i-manabee.com/child-login
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true