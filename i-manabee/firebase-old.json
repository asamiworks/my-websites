{
  "projects": {
    "default": "i-manabee",
    "staging": "i-manabee-staging",
    "production": "i-manabee"
  },
  "hosting": [
    {
      "target": "staging",
      "public": "out",
      "ignore": [
        "firebase.json",
        "**/.*",
        "**/node_modules/**"
      ],
      "rewrites": [
        {
          "source": "**",
          "destination": "/index.html"
        }
      ],
      "headers": [
        {
          "source": "**/*.@(jpg|jpeg|gif|png|svg|webp|ico)",
          "headers": [
            {
              "key": "Cache-Control",
              "value": "public, max-age=31536000, immutable"
            }
          ]
        },
        {
          "source": "**/*.@(js|css)",
          "headers": [
            {
              "key": "Cache-Control",
              "value": "public, max-age=31536000, immutable"
            }
          ]
        },
        {
          "source": "/api/**",
          "headers": [
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            }
          ]
        }
      ],
      "cleanUrls": true,
      "trailingSlash": false
    },
    {
      "target": "production",
      "public": "out",
      "ignore": [
        "firebase.json",
        "**/.*",
        "**/node_modules/**"
      ],
      "rewrites": [
        {
          "source": "**",
          "destination": "/index.html"
        }
      ],
      "headers": [
        {
          "source": "**/*.@(jpg|jpeg|gif|png|svg|webp|ico)",
          "headers": [
            {
              "key": "Cache-Control",
              "value": "public, max-age=31536000, immutable"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            }
          ]
        },
        {
          "source": "**/*.@(js|css)",
          "headers": [
            {
              "key": "Cache-Control",
              "value": "public, max-age=31536000, immutable"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            }
          ]
        },
        {
          "source": "/api/**",
          "headers": [
            {
              "key": "Cache-Control",
              "value": "no-cache, no-store, must-revalidate"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            }
          ]
        },
        {
          "source": "**",
          "headers": [
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Strict-Transport-Security",
              "value": "max-age=63072000; includeSubDomains; preload"
            }
          ]
        }
      ],
      "cleanUrls": true,
      "trailingSlash": false
    }
  ],
  "firestore": {
    "rules": "firestore.rules",
    "indexes": "firestore.indexes.json"
  },
  "storage": {
    "rules": "storage.rules"
  },
  "emulators": {
    "auth": {
      "port": 9099
    },
    "firestore": {
      "port": 8080
    },
    "storage": {
      "port": 9199
    },
    "hosting": {
      "port": 5000
    },
    "ui": {
      "enabled": true,
      "port": 4000
    },
    "singleProjectMode": true
  }
}
const firebaserc = {
  "projects": {
    "default": "i-manabee-prod",
    "development": "i-manabee-dev",
    "staging": "i-manabee-staging"
  }
};

// ========================================
// public/js/firebase-config.js - クライアント側Firebase設定
// ========================================
const firebaseConfigJS = `
// Firebase設定（クライアント側）
// 注意: このファイルは公開されるため、APIキーは環境変数から読み込む

const firebaseConfig = {
    apiKey: "YOUR_API_KEY", // TODO: Firebase Consoleから取得
    authDomain: "i-manabee-prod.firebaseapp.com",
    projectId: "i-manabee-prod",
    storageBucket: "i-manabee-prod.appspot.com",
    messagingSenderId: "YOUR_SENDER_ID",
    appId: "YOUR_APP_ID",
    measurementId: "YOUR_MEASUREMENT_ID"
};

// Firebase初期化
let app;
let auth;
let db;

// 初期化関数
async function initializeFirebase() {
    try {
        // Firebaseアプリの初期化
        app = firebase.initializeApp(firebaseConfig);
        
        // 認証の初期化
        auth = firebase.auth();
        
        // Firestoreの初期化
        db = firebase.firestore();
        
        // 開発環境でのエミュレータ接続
        if (location.hostname === 'localhost') {
            console.log('🔧 開発環境検出: エミュレータに接続します');
            
            // Auth エミュレータ
            auth.useEmulator('http://localhost:9099');
            
            // Firestore エミュレータ
            db.useEmulator('localhost', 8080);
        }
        
        console.log('✅ Firebase初期化完了');
        return { app, auth, db };
        
    } catch (error) {
        console.error('❌ Firebase初期化エラー:', error);
        throw error;
    }
}

// 認証状態の監視
function onAuthStateChanged(callback) {
    return auth.onAuthStateChanged(callback);
}

// サインアップ
async function signUp(email, password) {
    try {
        const userCredential = await auth.createUserWithEmailAndPassword(email, password);
        console.log('✅ アカウント作成成功');
        return userCredential.user;
    } catch (error) {
        console.error('❌ サインアップエラー:', error);
        throw handleAuthError(error);
    }
}

// サインイン
async function signIn(email, password) {
    try {
        const userCredential = await auth.signInWithEmailAndPassword(email, password);
        console.log('✅ ログイン成功');
        return userCredential.user;
    } catch (error) {
        console.error('❌ ログインエラー:', error);
        throw handleAuthError(error);
    }
}

// サインアウト
async function signOut() {
    try {
        await auth.signOut();
        console.log('✅ ログアウト成功');
    } catch (error) {
        console.error('❌ ログアウトエラー:', error);
        throw error;
    }
}

// エラーハンドリング
function handleAuthError(error) {
    const errorMessages = {
        'auth/email-already-in-use': 'このメールアドレスは既に使用されています',
        'auth/invalid-email': 'メールアドレスの形式が正しくありません',
        'auth/operation-not-allowed': 'この操作は許可されていません',
        'auth/weak-password': 'パスワードは6文字以上で設定してください',
        'auth/user-disabled': 'このアカウントは無効化されています',
        'auth/user-not-found': 'アカウントが見つかりません',
        'auth/wrong-password': 'パスワードが間違っています',
        'auth/network-request-failed': 'ネットワークエラーが発生しました'
    };
    
    const message = errorMessages[error.code] || 'エラーが発生しました';
    return new Error(message);
}

// ドキュメント作成
async function createDocument(collection, data) {
    try {
        const docRef = await db.collection(collection).add({
            ...data,
            createdAt: firebase.firestore.FieldValue.serverTimestamp(),
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
        return docRef.id;
    } catch (error) {
        console.error('Firestore書き込みエラー:', error);
        throw error;
    }
}

// ドキュメント取得
async function getDocument(collection, docId) {
    try {
        const doc = await db.collection(collection).doc(docId).get();
        if (doc.exists) {
            return { id: doc.id, ...doc.data() };
        } else {
            return null;
        }
    } catch (error) {
        console.error('Firestore読み込みエラー:', error);
        throw error;
    }
}

// ドキュメント更新
async function updateDocument(collection, docId, data) {
    try {
        await db.collection(collection).doc(docId).update({
            ...data,
            updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
    } catch (error) {
        console.error('Firestore更新エラー:', error);
        throw error;
    }
}

// リアルタイムリスナー
function subscribeToDocument(collection, docId, callback) {
    return db.collection(collection).doc(docId)
        .onSnapshot((doc) => {
            if (doc.exists) {
                callback({ id: doc.id, ...doc.data() });
            } else {
                callback(null);
            }
        });
}

// エクスポート（グローバルに公開）
window.FirebaseService = {
    initializeFirebase,
    onAuthStateChanged,
    signUp,
    signIn,
    signOut,
    createDocument,
    getDocument,
    updateDocument,
    subscribeToDocument
};
`;

// ========================================
// server/utils/firebase.js - サーバー側Firebase Admin設定
// ========================================
const firebaseAdminJS = `
// Firebase Admin SDK設定（サーバー側）
const admin = require('firebase-admin');

// 環境変数から認証情報を読み込み
const serviceAccount = {
    type: "service_account",
    project_id: process.env.FIREBASE_PROJECT_ID || "i-manabee-prod",
    private_key_id: process.env.FIREBASE_PRIVATE_KEY_ID,
    private_key: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),
    client_email: process.env.FIREBASE_CLIENT_EMAIL,
    client_id: process.env.FIREBASE_CLIENT_ID,
    auth_uri: "https://accounts.google.com/o/oauth2/auth",
    token_uri: "https://oauth2.googleapis.com/token",
    auth_provider_x509_cert_url: "https://www.googleapis.com/oauth2/v1/certs",
    client_x509_cert_url: process.env.FIREBASE_CERT_URL
};

// Firebase Admin初期化
let initialized = false;

function initializeAdmin() {
    if (!initialized) {
        try {
            admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                databaseURL: \`https://\${serviceAccount.project_id}.firebaseio.com\`
            });
            initialized = true;
            console.log('✅ Firebase Admin SDK初期化完了');
        } catch (error) {
            console.error('❌ Firebase Admin SDK初期化エラー:', error);
            throw error;
        }
    }
    return admin;
}

// Firestoreインスタンス取得
function getFirestore() {
    initializeAdmin();
    return admin.firestore();
}

// 認証インスタンス取得
function getAuth() {
    initializeAdmin();
    return admin.auth();
}

// トークン検証
async function verifyToken(idToken) {
    try {
        const auth = getAuth();
        const decodedToken = await auth.verifyIdToken(idToken);
        return decodedToken;
    } catch (error) {
        console.error('トークン検証エラー:', error);
        throw new Error('認証エラー');
    }
}

// ユーザー作成
async function createUser(email, password, displayName) {
    try {
        const auth = getAuth();
        const userRecord = await auth.createUser({
            email,
            password,
            displayName,
            emailVerified: false,
            disabled: false
        });
        return userRecord;
    } catch (error) {
        console.error('ユーザー作成エラー:', error);
        throw error;
    }
}

// Firestoreバッチ処理
async function batchWrite(operations) {
    const db = getFirestore();
    const batch = db.batch();
    
    operations.forEach(op => {
        if (op.type === 'create') {
            const ref = db.collection(op.collection).doc();
            batch.set(ref, op.data);
        } else if (op.type === 'update') {
            const ref = db.collection(op.collection).doc(op.id);
            batch.update(ref, op.data);
        } else if (op.type === 'delete') {
            const ref = db.collection(op.collection).doc(op.id);
            batch.delete(ref);
        }
    });
    
    await batch.commit();
}

module.exports = {
    initializeAdmin,
    getFirestore,
    getAuth,
    verifyToken,
    createUser,
    batchWrite
};
`;

// ========================================
// firestore.rules - セキュリティルール
// ========================================
const firestoreRules = `
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ユーザー認証の確認
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 本人確認
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // 保護者のプロファイル
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if false; // 削除は管理者のみ
      
      // 子どもプロファイル
      match /children/{childId} {
        allow read, write: if isOwner(userId);
      }
      
      // アクティブチャット
      match /active_chats/{chatId} {
        allow read, write: if isOwner(userId);
      }
      
      // アーカイブチャット（有料プランのみ）
      match /archived_chats/{chatId} {
        allow read, write: if isOwner(userId) && 
          get(/databases/$(database)/documents/users/$(userId)/profile).data.plan in ['premium', 'family'];
      }
      
      // 利用状況トラッキング
      match /usage_tracking/{document=**} {
        allow read: if isOwner(userId);
        allow write: if false; // サーバー側のみ書き込み可
      }
      
      // 安全ログ
      match /safety_logs/{logId} {
        allow read: if isOwner(userId);
        allow write: if false; // サーバー側のみ書き込み可
      }
      
      // レポート
      match /reports/{reportType}/{reportId} {
        allow read: if isOwner(userId);
        allow write: if false; // サーバー側のみ書き込み可
      }
    }
    
    // その他のドキュメントへのアクセスは拒否
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
`;

// ========================================
// .env.local テンプレート
// ========================================
const envTemplate = `
# Firebase設定
FIREBASE_PROJECT_ID=i-manabee-prod
FIREBASE_PRIVATE_KEY_ID=your_private_key_id
FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\\nyour_private_key\\n-----END PRIVATE KEY-----\\n"
FIREBASE_CLIENT_EMAIL=firebase-adminsdk-xxxxx@i-manabee-prod.iam.gserviceaccount.com
FIREBASE_CLIENT_ID=your_client_id
FIREBASE_CERT_URL=https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-xxxxx%40i-manabee-prod.iam.gserviceaccount.com

# AI API Keys（既存）
OPENAI_API_KEY=your_existing_openai_key
ANTHROPIC_API_KEY=your_existing_anthropic_key
GOOGLE_AI_API_KEY=your_gemini_api_key

# Stripe（後で設定）
STRIPE_SECRET_KEY=your_stripe_secret_key
STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret

# Session Secret
SESSION_SECRET=manabee-secret-key-2025-change-this-in-production

# Environment
NODE_ENV=development
PORT=3000
`;

// JSONファイルをエクスポート
module.exports = {
    firebaseJson,
    firebaserc,
    firebaseConfigJS,
    firebaseAdminJS,
    firestoreRules,
    envTemplate
};