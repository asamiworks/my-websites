"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { auth } from "../../utils/firebaseConfig";
import { signInWithCustomToken } from "firebase/auth";
import { getFunctions, httpsCallable } from "firebase/functions";
import { app } from "../../utils/firebaseConfig";
import styles from "./LineAuthButton.module.css";

interface LineAuthButtonProps {
  onSuccess?: (user: any) => void;
  onError?: (error: Error) => void;
}

export default function LineAuthButton({ onSuccess, onError }: LineAuthButtonProps) {
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleLineLogin = () => {
    const channelId = process.env.NEXT_PUBLIC_LINE_LOGIN_CHANNEL_ID;
    const redirectUri = process.env.NEXT_PUBLIC_LINE_LOGIN_REDIRECT_URI;
    const state = Math.random().toString(36).substring(7);
    const nonce = Math.random().toString(36).substring(7);

    // LocalStorageに state を保存（CSRF対策）
    localStorage.setItem("line_auth_state", state);

    const authUrl = `https://access.line.me/oauth2/v2.1/authorize?` +
      `response_type=code&` +
      `client_id=${channelId}&` +
      `redirect_uri=${encodeURIComponent(redirectUri)}&` +
      `state=${state}&` +
      `scope=profile%20openid&` +
      `nonce=${nonce}`;

    window.location.href = authUrl;
  };

  return (
    <button
      onClick={handleLineLogin}
      className={styles.lineButton}
      disabled={loading}
    >
      {loading ? "処理中..." : "LINEでログイン"}
    </button>
  );
}
