
"use client";

import { useState, useEffect } from "react";
import { auth } from "../../utils/firebaseConfig";
import {
  GoogleAuthProvider,
  signInWithPopup,
  signInWithEmailAndPassword,
  sendPasswordResetEmail,
  UserCredential,
} from "firebase/auth";
import { useRouter } from "next/navigation";
import { syncLocalStorageWithFirebase } from "../../utils/syncLocalStorageWithFirebase";
import styles from "./LoginPage.module.css";
import { FirebaseError } from "firebase/app";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [lockoutTime, setLockoutTime] = useState<number | null>(null);
  const [lockoutRemaining, setLockoutRemaining] = useState<string | null>(null);
  const [showResetPassword, setShowResetPassword] = useState(false);
  const router = useRouter();

  useEffect(() => {
    if (lockoutTime) {
      const interval = setInterval(() => {
        const timeLeft = lockoutTime - Date.now();
        if (timeLeft <= 0) {
          setLockoutTime(null);
          setLockoutRemaining(null);
          clearInterval(interval);
        } else {
          const minutes = Math.floor(timeLeft / 60000);
          const seconds = Math.floor((timeLeft % 60000) / 1000);
          setLockoutRemaining(`${minutes}分${seconds}秒`);
        }
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [lockoutTime]);

  const resetMessages = () => {
    setErrorMessage(null);
    setSuccessMessage(null);
  };

  const handleLogin = async (loginFunction: () => Promise<UserCredential>) => {
    if (lockoutTime && Date.now() < lockoutTime) {
      setErrorMessage("操作が制限されています。しばらく待って再試行してください。");
      return;
    }
  
    setLoading(true);
    resetMessages();
    try {
      const userCredential = await loginFunction();
      const user = userCredential.user;
  
      if (user) {
        // ユーザーIDを引数として渡す
        await syncLocalStorageWithFirebase(user.uid);
        router.push("/my-page");
      }
    } catch (error) {
      if (error instanceof FirebaseError) {
        switch (error.code) {
          case "auth/user-not-found":
            setErrorMessage("入力されたメールアドレスは登録されていません。");
            break;
          case "auth/wrong-password":
            setErrorMessage("パスワードが間違っています。");
            break;
          case "auth/invalid-email":
            setErrorMessage("有効なメールアドレスを入力してください。");
            break;
          default:
            setErrorMessage("ログインに失敗しました。入力内容を確認してください。");
        }
      } else {
        setErrorMessage("予期しないエラーが発生しました。");
      }
  
      setLockoutTime((prevTime) => {
        const attempts = prevTime ? prevTime + 1 : 1;
        if (attempts >= 4) {
          const lockoutDuration = 5 * 60 * 1000; // 5分
          setLockoutTime(Date.now() + lockoutDuration);
          setErrorMessage("ログイン試行が多すぎます。5分後に再試行してください。");
        }
        return attempts;
      });
    } finally {
      setLoading(false);
    }
  };
  

  const handleGoogleLogin = () => {
    const provider = new GoogleAuthProvider();
    return signInWithPopup(auth, provider);
  };

  const handleEmailPasswordLogin = async (): Promise<UserCredential> => {
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
  
      // メール認証の確認
      if (!user.emailVerified) {
        alert("メールアドレスが確認されていません。メールをご確認いただき、認証を完了してください。");
        await auth.signOut(); // 未認証の場合はログアウト
        throw new Error("メールアドレスが確認されていません。");
      }
  
      return userCredential; // 認証済みのユーザーを返す
    } catch (error) {
      throw error; // エラーはそのまま投げる
    }
  };
  
  

  const handlePasswordReset = async () => {
    if (!email) {
      setErrorMessage("パスワードをリセットするには、メールアドレスを入力してください。");
      return;
    }
    setLoading(true);
    resetMessages();
    try {
      await sendPasswordResetEmail(auth, email);
      setSuccessMessage("パスワードリセット用のメールを送信しました。メールをご確認ください。");
    } catch (error) {
      console.error("パスワードリセットエラー:", error);
      setErrorMessage("パスワードリセットに失敗しました。正しいメールアドレスを入力してください。");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      <h1>ログイン</h1>

      <button
        onClick={() => handleLogin(handleGoogleLogin)}
        className={`${styles.button} ${loading ? styles.disabledButton : ""}`}
        disabled={loading}
      >
        {loading ? "ログイン中..." : "Googleでログイン"}
      </button>

      <h2>メールアドレスとパスワードでログイン</h2>
      <input
        type="email"
        placeholder="メールアドレス"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        className={styles.input}
      />
      <input
        type="password"
        placeholder="パスワード"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        className={styles.input}
      />
      {errorMessage && <p className={styles.error}>{errorMessage}</p>}
      {successMessage && <p className={styles.success}>{successMessage}</p>}
      {lockoutRemaining && <p className={styles.error}>ロック解除まで: {lockoutRemaining}</p>}

      <button
  onClick={() => handleLogin(handleEmailPasswordLogin)}
  className={`${styles.button} ${loading || !email || !password || !!lockoutTime ? styles.disabledButton : ""}`}
  disabled={loading || !email || !password || !!lockoutTime}
>
  {loading ? "ログイン中..." : "ログイン"}
</button>


      <div className={styles.resetPasswordLink}>
        <p>
          パスワードを忘れた方は、
          <button
            onClick={() => setShowResetPassword(true)}
            className={styles.linkButton}
          >
            こちら
          </button>
          をクリックしてください。
        </p>
      </div>

      {showResetPassword && (
        <div className={styles.resetPasswordContainer}>
          <h3>パスワードリセット</h3>
          <p>登録したメールアドレスを入力してください。</p>
          <input
            type="email"
            placeholder="メールアドレス"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className={styles.input}
          />
          <button
            onClick={handlePasswordReset}
            className={`${styles.button} ${loading || !email ? styles.disabledButton : ""}`}
            disabled={loading || !email}
          >
            {loading ? "送信中..." : "リセットメールを送信"}
          </button>
        </div>
      )}

      <div className={styles.createAccountLink}>
        <p>
          アカウントをお持ちでない方は、
          <a href="/create-account" className={styles.link}>こちら</a>
          から作成してください。
        </p>
      </div>
    </div>
  );
}